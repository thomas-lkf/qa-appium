/*global describe:true, it:true, before:true, after:true */
"use strict";

var yiewd = require('../../lib/main.js')
  , _ = require('underscore')
  , should = require('should')
  , SauceLabs = require('saucelabs')
  , baseUrl = 'http://saucelabs.com/test/guinea-pig/'
  , userName = process.env.SAUCE_USERNAME
  , accessKey = process.env.SAUCE_ACCESS_KEY
  , run = require("monocle-js").run
  , caps = {
      platform: 'Linux'
      , browserName: 'chrome'
      , name: 'Yiewd test'
    };

require('colors');

describe('yiewd sauce support', function() {
  // handle running test server
  var sauce = new SauceLabs({
    username: userName
    , password: accessKey
  });

  it('should only work for sauce tests', function(done) {
    var driver = yiewd.remote();
    run(wrapGenerator.mark(function $callee(d) {
      var err;

      return wrapGenerator(function $callee$($ctx0) {
        while (1) switch ($ctx0.prev = $ctx0.next) {
        case 0:
          $ctx0.next = 2;
          return driver.init({browserName: 'chrome'});
        case 2:
          err = null;
          $ctx0.prev = 3;
          $ctx0.next = 6;
          return driver.reportPass();
        case 6:
          $ctx0.next = 11;
          break;
        case 8:
          $ctx0.prev = 8;
          $ctx0.t0 = $ctx0.catch(3);
          err = $ctx0.t0;
        case 11:
          $ctx0.next = 13;
          return driver.quit();
        case 13:
          should.exist(err);
          should.exist(err.message);
          done();
        case 16:
        case "end":
          return $ctx0.stop();
        }
      }, $callee, this, [[3, 8]]);
    }));
  });
  
  describe('on sauce', function() {
    var browser;

    before(function() {
      browser = yiewd.sauce(userName, accessKey);
      browser.on('status', function(info) {
        console.log(info.cyan);
      });
      browser.on('command', function(meth, path, data) {
        console.log(' > ' + meth.yellow, path.grey, data || '');
      });
    });

    it('should run a job on sauce', function(done) {
      browser.run(wrapGenerator.mark(function $callee() {
        return wrapGenerator(function $callee$($ctx1) {
          while (1) switch ($ctx1.prev = $ctx1.next) {
          case 0:
            $ctx1.next = 2;
            return this.init(caps);
          case 2:
            $ctx1.next = 4;
            return this.get(baseUrl);
          case 4:
            $ctx1.next = 6;
            return this.title();
          case 6:
            $ctx1.sent.should.include("I am a page title");
            $ctx1.next = 9;
            return this.quit();
          case 9:
            done();
          case 10:
          case "end":
            return $ctx1.stop();
          }
        }, $callee, this);
      }));
    });

    it('should set passed status', function(done) {
      browser.run(wrapGenerator.mark(function $callee() {
        var sessId, jobInfo;

        return wrapGenerator(function $callee$($ctx2) {
          while (1) switch ($ctx2.prev = $ctx2.next) {
          case 0:
            $ctx2.next = 2;
            return this.init(caps);
          case 2:
            sessId = $ctx2.sent;
            $ctx2.next = 5;
            return this.get(baseUrl);
          case 5:
            $ctx2.next = 7;
            return this.title();
          case 7:
            $ctx2.sent.should.include("I am a page title");
            $ctx2.next = 10;
            return this.reportPass();
          case 10:
            $ctx2.next = 12;
            return this.quit();
          case 12:
            $ctx2.next = 14;
            return this.sauceInfo();
          case 14:
            jobInfo = $ctx2.sent;
            jobInfo.passed.should.equal(true);
            done();
          case 17:
          case "end":
            return $ctx2.stop();
          }
        }, $callee, this);
      }));
    });

    it('should set failed status', function(done) {
      browser.run(wrapGenerator.mark(function $callee() {
        var sessId, jobInfo;

        return wrapGenerator(function $callee$($ctx3) {
          while (1) switch ($ctx3.prev = $ctx3.next) {
          case 0:
            $ctx3.next = 2;
            return this.init(caps);
          case 2:
            sessId = $ctx3.sent;
            $ctx3.next = 5;
            return this.get(baseUrl);
          case 5:
            $ctx3.next = 7;
            return this.title();
          case 7:
            $ctx3.sent.should.include("I am a page title");
            $ctx3.next = 10;
            return this.reportFail();
          case 10:
            $ctx3.next = 12;
            return this.quit();
          case 12:
            $ctx3.next = 14;
            return this.sauceInfo();
          case 14:
            jobInfo = $ctx3.sent;
            jobInfo.passed.should.equal(false);
            done();
          case 17:
          case "end":
            return $ctx3.stop();
          }
        }, $callee, this);
      }));
    });
  });

});

