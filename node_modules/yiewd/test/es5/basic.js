/*global describe:true, it:true, before:true, after:true */
"use strict";

var _ = require('underscore');
var yiewd = require('../../lib/main.js')
  , Express = require('../server/express.js').Express
  , should = require('should')
  , baseUrl = 'http://127.0.0.1:8181/test/'
  , monocle = require("monocle-js")
  , o0 = monocle.o0
  , run = monocle.run
  , caps = { browserName: 'chrome' };

describe('yiewd', function() {
  // handle running test server
  var server = new Express();
  var driver = null;
  var handles = [];
  before(function(done) {
    server.start();
    done();
  });

  after(function(done) {
    server.stop();
    if (driver !== null) {
      driver.run(wrapGenerator.mark(function $callee() {
        return wrapGenerator(function $callee$($ctx0) {
          while (1) switch ($ctx0.prev = $ctx0.next) {
          case 0:
            $ctx0.next = 2;
            return this.quit();
          case 2:
            done();
          case 3:
          case "end":
            return $ctx0.stop();
          }
        }, $callee, this);
      }));
    } else {
      done();
    }
  });

  it('should start a session', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var d;

      return wrapGenerator(function $callee$($ctx1) {
        while (1) switch ($ctx1.prev = $ctx1.next) {
        case 0:
          d = yiewd.remote();
          driver = d;
          $ctx1.next = 4;
          return driver.init(caps);
        case 4:
          done();
        case 5:
        case "end":
          return $ctx1.stop();
        }
      }, $callee, this);
    }));
  });

  it('should get session status', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var status;

      return wrapGenerator(function $callee$($ctx2) {
        while (1) switch ($ctx2.prev = $ctx2.next) {
        case 0:
          $ctx2.next = 2;
          return driver.status();
        case 2:
          status = $ctx2.sent;
          should.exist(status.build);
          done();
        case 5:
        case "end":
          return $ctx2.stop();
        }
      }, $callee, this);
    }));
  });

  it('should get list of sessions', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var sessions;

      return wrapGenerator(function $callee$($ctx3) {
        while (1) switch ($ctx3.prev = $ctx3.next) {
        case 0:
          $ctx3.next = 2;
          return driver.sessions();
        case 2:
          sessions = $ctx3.sent;
          sessions.length.should.be.above(0);
          should.exist(sessions[0].id);
          done();
        case 6:
        case "end":
          return $ctx3.stop();
        }
      }, $callee, this);
    }));
  });

  it('should get session caps', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var sessionCaps;

      return wrapGenerator(function $callee$($ctx4) {
        while (1) switch ($ctx4.prev = $ctx4.next) {
        case 0:
          $ctx4.next = 2;
          return driver.sessionCapabilities();
        case 2:
          sessionCaps = $ctx4.sent;
          should.exist(sessionCaps.browserName);
          sessionCaps.browserName.should.equal('chrome');
          done();
        case 6:
        case "end":
          return $ctx4.stop();
        }
      }, $callee, this);
    }));
  });

  it('should get a url, page title, and window handle', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var testPage, title, handle;

      return wrapGenerator(function $callee$($ctx5) {
        while (1) switch ($ctx5.prev = $ctx5.next) {
        case 0:
          testPage = baseUrl + 'guinea-pig.html';
          $ctx5.next = 3;
          return driver.get(testPage);
        case 3:
          $ctx5.next = 5;
          return driver.title();
        case 5:
          title = $ctx5.sent;
          title.should.equal("I am a page title");
          $ctx5.next = 9;
          return driver.windowHandle();
        case 9:
          handle = $ctx5.sent;
          handle.length.should.be.above(0);
          handles['window-1'] = handle;
          done();
        case 13:
        case "end":
          return $ctx5.stop();
        }
      }, $callee, this);
    }));
  });

  it('should open a new window', function(done) {
    var newWindow = baseUrl + 'guinea-pig2.html';
    run(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx6) {
        while (1) switch ($ctx6.prev = $ctx6.next) {
        case 0:
          $ctx6.next = 2;
          return driver.newWindow(newWindow, 'window-2');
        case 2:
          done();
        case 3:
        case "end":
          return $ctx6.stop();
        }
      }, $callee, this);
    }));
  });

  it('should switch to a window', function(done) {
    run(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx7) {
        while (1) switch ($ctx7.prev = $ctx7.next) {
        case 0:
          $ctx7.next = 2;
          return driver.window("window-2");
        case 2:
          done();
        case 3:
        case "end":
          return $ctx7.stop();
        }
      }, $callee, this);
    }));
  });

  it('should get the window name', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var name, handle;

      return wrapGenerator(function $callee$($ctx8) {
        while (1) switch ($ctx8.prev = $ctx8.next) {
        case 0:
          $ctx8.next = 2;
          return driver.windowName();
        case 2:
          name = $ctx8.sent;
          name.should.equal("window-2");
          $ctx8.next = 6;
          return driver.windowHandle();
        case 6:
          handle = $ctx8.sent;
          handle.length.should.be.above(0);
          handle.should.not.eql(handles['window-1']);
          handles['window-2'] = handle;
          done();
        case 11:
        case "end":
          return $ctx8.stop();
        }
      }, $callee, this);
    }));
  });

  it('should get window handles', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var wdHandles;

      return wrapGenerator(function $callee$($ctx9) {
        while (1) switch ($ctx9.prev = $ctx9.next) {
        case 0:
          $ctx9.next = 2;
          return driver.windowHandles();
        case 2:
          wdHandles = $ctx9.sent;

          _.each(handles, function(handle, handleId) {
            wdHandles.should.include(handle);
          });

          done();
        case 5:
        case "end":
          return $ctx9.stop();
        }
      }, $callee, this);
    }));
  });

  it('should handle wd errors', function(done) {
    driver.run(wrapGenerator.mark(function $callee() {
      var err;

      return wrapGenerator(function $callee$($ctx10) {
        while (1) switch ($ctx10.prev = $ctx10.next) {
        case 0:
          $ctx10.prev = 0;
          $ctx10.next = 3;
          return this.alertText();
        case 3:
          $ctx10.next = 8;
          break;
        case 5:
          $ctx10.prev = 5;
          $ctx10.t0 = $ctx10.catch(0);
          err = $ctx10.t0;
        case 8:
          should.exist(err);
          err.message.should.include('27');
          done();
        case 11:
        case "end":
          return $ctx10.stop();
        }
      }, $callee, this, [[0, 5]]);
    }));
  });

  it('should handle wd errors asynchronously', function(done) {
    driver.run(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx11) {
        while (1) switch ($ctx11.prev = $ctx11.next) {
        case 0:
          $ctx11.prev = 0;
          $ctx11.next = 3;
          return this.alertText();
        case 3:
          $ctx11.next = 8;
          break;
        case 5:
          $ctx11.prev = 5;
          $ctx11.t1 = $ctx11.catch(0);
          throw $ctx11.t1;
        case 8:
        case "end":
          return $ctx11.stop();
        }
      }, $callee, this, [[0, 5]]);
    })).nodeify(function (err) {
      should.exist(err);
      err.message.should.include('27');
      done();
    });
  });

  it('should sleep', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var begin, end;

      return wrapGenerator(function $callee$($ctx12) {
        while (1) switch ($ctx12.prev = $ctx12.next) {
        case 0:
          begin = Date.now();
          $ctx12.next = 3;
          return driver.sleep(500);
        case 3:
          end = Date.now();
          (end - begin).should.be.above(499);
          done();
        case 6:
        case "end":
          return $ctx12.stop();
        }
      }, $callee, this);
    }));
  });

  it('should be able to compose methods', function(done) {
    var title = '';
    var start = Date.now();
    var myFunc = o0(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx13) {
        while (1) switch ($ctx13.prev = $ctx13.next) {
        case 0:
          $ctx13.next = 2;
          return driver.title();
        case 2:
          title += $ctx13.sent;
          $ctx13.next = 5;
          return driver.sleep(250);
        case 5:
        case "end":
          return $ctx13.stop();
        }
      }, $callee, this);
    }));
    var myFunc2 = o0(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx14) {
        while (1) switch ($ctx14.prev = $ctx14.next) {
        case 0:
          title += ' foo ';
        case 1:
        case "end":
          return $ctx14.stop();
        }
      }, $callee, this);
    }));
    run(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx15) {
        while (1) switch ($ctx15.prev = $ctx15.next) {
        case 0:
          $ctx15.next = 2;
          return myFunc();
        case 2:
          $ctx15.next = 4;
          return myFunc2();
        case 4:
          $ctx15.next = 6;
          return myFunc();
        case 6:
          (Date.now() - start).should.be.above(499);
          done();
        case 8:
        case "end":
          return $ctx15.stop();
        }
      }, $callee, this);
    }));
  });

  it('driver.run should bind methods to `this`', function(done) {
    driver.run(wrapGenerator.mark(function $callee() {
      var title;

      return wrapGenerator(function $callee$($ctx16) {
        while (1) switch ($ctx16.prev = $ctx16.next) {
        case 0:
          $ctx16.next = 2;
          return this.title();
        case 2:
          title = $ctx16.sent;
          title.should.equal('I am another page title');
          done();
        case 5:
        case "end":
          return $ctx16.stop();
        }
      }, $callee, this);
    }));
  });

  it('should stop a session', function(done) {
    run(wrapGenerator.mark(function $callee() {
      return wrapGenerator(function $callee$($ctx17) {
        while (1) switch ($ctx17.prev = $ctx17.next) {
        case 0:
          $ctx17.next = 2;
          return driver.quit();
        case 2:
          driver = null;
          done();
        case 4:
        case "end":
          return $ctx17.stop();
        }
      }, $callee, this);
    }));
  });

  it('should work passing in host and port', function(done) {
    run(wrapGenerator.mark(function $callee() {
      var d;

      return wrapGenerator(function $callee$($ctx18) {
        while (1) switch ($ctx18.prev = $ctx18.next) {
        case 0:
          d = yiewd.remote('localhost', 4444);
          $ctx18.next = 3;
          return d.init(caps);
        case 3:
          $ctx18.next = 5;
          return d.quit();
        case 5:
          done();
        case 6:
        case "end":
          return $ctx18.stop();
        }
      }, $callee, this);
    }));
  });

});
